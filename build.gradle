plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.10'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {  // 과거의 스프링 Maven 래퍼지토리 (pom.xml)
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // 프론트 담당
    implementation 'org.springframework.boot:spring-boot-starter-web'       // 스프링 웹
   // implementation 'org.springframework.boot:spring-boot-starter-web-services'  // 스프링 웹 서비스(생략 가능)

    compileOnly 'org.projectlombok:lombok'  // 객체 담당
    testCompileOnly 'org.projectlombok:lombok'  // 테스트 환경 럼북
    testAnnotationProcessor 'org.projectlombok:lombok'  // 테스트환경 어노테이션(@)
    annotationProcessor 'org.projectlombok:lombok'  // 어노테이션 럼북 셋팅

    developmentOnly 'org.springframework.boot:spring-boot-devtools' // 부트 개발 필수 코드
   // runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'  // 마리아DB JDBC Driver

    // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.4.1'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa // DB객체 지향으로 설정
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '3.3.4'

    //JPA에서 필요한 URL, ID, PW, 드라이버 등을 Application.properties에 넣어야 한다.



    testImplementation 'org.springframework.boot:spring-boot-starter-test'  // 테스트용 코드
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'    // junit 메서드 별로 테스트
}

tasks.named('test') {
    useJUnitPlatform()
}
